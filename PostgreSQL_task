import psycopg2


params = "dbname=test_db user=test_user password=1234"
conn = psycopg2.connect(params)
cur = conn.cursor()
student_1 = {'id': 1, 'name': 'John', 'gpa': 4, 'birth': '20/08/1985'}
new_student = {}
students_list = [{'id': 3, 'name': 'Ron', 'gpa': 5, 'birth': '01/02/1981'},
                 {'id': 4, 'name': 'Fred', 'gpa': 4.4, 'birth': '03/012/2001'}]
students_list2 = [{'id': 5, 'name': 'Gerda', 'gpa': 2.2, 'birth': '16/05/1988'},
                  {'id': 6, 'name': 'Marta', 'gpa': 4.2, 'birth': '25/012/2000'}]
result_list = []


def make_new_student():
    """пользовательский ввод студента в словарь и добавляет в список"""
    new_student['id'] = input('введите id: ')
    new_student['name'] = input('введите имя студента: ')
    new_student['gpa'] = input('введите средний балл: ')
    new_student['birth'] = input('введите дату рождения: ')
    students_list.append(new_student)
    return new_student


def create_db():  # создает таблицы
    """создает таблицы student, course, Course_students
    я попытался сделать обработку ситуации когда таблица уже есть, понял что транзакция не закрыватся.
    но многое мне тут еще не понятно"""
    try:
        conn = psycopg2.connect(params)
        cur = conn.cursor()
        cur.execute(
            "CREATE TABLE student (id integer PRIMARY KEY, name varchar(100), gpa numeric(10,2), birth timestamp with "
            "time zone);")
        conn.commit()
    except psycopg2.errors.DuplicateTable:
        print('table student already created')
    finally:
        conn.close()
    try:
        conn = psycopg2.connect(params)
        cur = conn.cursor()
        cur.execute("CREATE TABLE course (id integer PRIMARY KEY, name varchar(100));")
        conn.commit()
    except psycopg2.errors.DuplicateTable:
        print('table course already created')
    finally:
        conn.close()
    try:
        # print('block try create Course_students')
        conn = psycopg2.connect(params)
        # print(conn)
        cur = conn.cursor()
        # print(cur)
        cur.execute("CREATE TABLE Course_students (id serial PRIMARY KEY, id_students integer , "
                    "id_course integer);")
        conn.commit()
    except psycopg2.errors.DuplicateTable:
        print('table Course_students already created')
    finally:
        conn.close()
    print('end create db')


def get_students(course_id):
    """" возвращает студентов определенного курса """
    cur.execute("select * from Course_students where id_course = %s", str(course_id))
    results_get = cur.fetchall()
    for st_item in results_get:
        result_list.append(get_student(st_item[1]))
    return result_list


def add_students(course_id, students):
    """создает студентов из списка словарей и записывает каждого на курс"""
    cur.execute("select * from course")
    test_in = cur.fetchone()
    if course_id not in test_in:
        create_new_course(course_id, input('Введите имя нового курса: '))
    for student_item in students:
        add_student(student_item)
        cur.execute("""INSERT INTO Course_students (id_students, id_course) values(%s , %s)""", (student_item['id'],
                                                                                                 course_id))


def add_student(student):
    """создает 1 студента из словаря"""
    cur.execute("INSERT INTO Student (id, name, gpa, birth) VALUES (%s, %s, %s, %s)", (student['id'], student['name'],
                                                                                       student['gpa'],
                                                                                       student['birth']))


def get_student(student_id):
    """возвращает студента по id"""
    cur.execute("select * from student where id = %s", str(student_id))
    results_get = cur.fetchone()
    return results_get


def create_new_course(id_course, name_new_course):
    """создает новый курс. аргументы: (id курса, имя курса)"""
    cur.execute("INSERT INTO Course (id ,name) VALUES (%s, %s)", (id_course, name_new_course))


# create_db()
# create_new_course(1, 'one')
# add_students(2, students_list2)
# print(get_student(3))

conn.commit()
cur.close()
conn.close()
